예제 EmployeeManager4.cpp를 확장하여 다음 특성에 해당하는 ForeignSalesWorker 클래스를 추가로 정의해보자.
"영업직 직원 중 일부는 오지산간으로 시장 개척을 진행하고 있다. 일부는 아마존에서, 또 일부는 테러의 위험이 있는 지역에서
영업활동을 진행 중에 있다. 따라서 이러한 직원들을 대상으로 별도의 위험 수당을 지급하고자 한다."

위험수당의 지급방식은 '위험의 노출도'에 따라서 다음과 같이 나뉘며, 한번 결정된 직원의 '위험 노출도'는 변경되지 않는다고 가정한다.
(이는 const 멤버 변수의 선언을 유도하는 것이다.)
- 리스크 A : 영업직의 기본급여와 인센티브 합계 총액의 30%를 추가로 지급한다.
- 리스크 B : 영업직의 기본급여와 인센티브 합계 총액의 20%를 추가로 지급한다.
- 리스크 C : 영업직의 기본급여와 인센티브 합계 총액의 10%를 추가로 지급한다.

다음 mian 함수와 함께 동작하도록 ForeignSalesWorker 클래스를 정의하기 바라며,
Employee 클래스는 객체 생성이 불가능한 추상 클래스로 정의하기 바란다.
[main 함수]
int main(void)
{
  // 직원 관리를 목적으로 설계된 컨트롤 클래스의 객체생성
  EmployeeHandler handler;

  // 해외 영업직 등록
  ForeignSalesWorker * fseller1 = new ForeignSalesWorker("Hong", 1000, 0.1, RISK_LEVEL::RISK_A);
  fseller1->AddSalesResult(7000); // 영업실적 7000
  handler.AddEmployee(fseller1);

  ForeignSalesWorker * fseller2 = new ForeignSalesWorker("Yoon", 1000, 0.1, RISK_LEVEL::RISK_B);
  fseller2->AddSalesResult(7000); // 영업실적 7000
  handler.AddEmployee(fseller2);

  ForeignSalesWorker * fseller3 = new ForeignSalesWorker("Yoon", 1000, 0.1, RISK_LEVEL::RISK_C);
  fseller3->AddSalesResult(7000); // 영업실적 7000
  handler.AddEmployee(fseller3);

  // 이번 달에 지불해야 할 급여의 정보
  handler.ShowAllSalaryInfo();
  return 0;
}

위의 main 함수에서 보이는 RISK_LEVEL 이름 공간의 RISK_A, RISK_B, RISK_C는 enum형으로 선언된 상수이다. 그럼 이어서 실행결과를 보이겠다.
[실행의 예]
name: Hong
salary: 1700
risk pay: 510
sum: 2210

name: Yoon
salary: 1700
risk pay: 340
sum: 2040

name: Lee
salary: 1700
risk pay: 170
sum: 1870

위의 실행결과에서 salary 내역은 일반 영업직 직원의 급여 계싼결과이며(기본급에 상여금을 더한 결과),
risk pay가 위험 수당에 속한다.